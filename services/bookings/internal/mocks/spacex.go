// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zsoltggs/tabeo-interview/services/bookings/internal/thirdparty/spacex (interfaces: SpaceXService)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/spacex.go github.com/zsoltggs/tabeo-interview/services/bookings/internal/thirdparty/spacex SpaceXService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	spacex "github.com/zsoltggs/tabeo-interview/services/bookings/internal/thirdparty/spacex"
	gomock "go.uber.org/mock/gomock"
)

// MockSpaceXService is a mock of SpaceXService interface.
type MockSpaceXService struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceXServiceMockRecorder
}

// MockSpaceXServiceMockRecorder is the mock recorder for MockSpaceXService.
type MockSpaceXServiceMockRecorder struct {
	mock *MockSpaceXService
}

// NewMockSpaceXService creates a new mock instance.
func NewMockSpaceXService(ctrl *gomock.Controller) *MockSpaceXService {
	mock := &MockSpaceXService{ctrl: ctrl}
	mock.recorder = &MockSpaceXServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceXService) EXPECT() *MockSpaceXServiceMockRecorder {
	return m.recorder
}

// GetLaunchPadForID mocks base method.
func (m *MockSpaceXService) GetLaunchPadForID(arg0 context.Context, arg1 string) (*spacex.Launchpad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchPadForID", arg0, arg1)
	ret0, _ := ret[0].(*spacex.Launchpad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchPadForID indicates an expected call of GetLaunchPadForID.
func (mr *MockSpaceXServiceMockRecorder) GetLaunchPadForID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchPadForID", reflect.TypeOf((*MockSpaceXService)(nil).GetLaunchPadForID), arg0, arg1)
}

// GetLaunchesForDate mocks base method.
func (m *MockSpaceXService) GetLaunchesForDate(arg0 context.Context, arg1 string, arg2 time.Time) ([]spacex.Launch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchesForDate", arg0, arg1, arg2)
	ret0, _ := ret[0].([]spacex.Launch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchesForDate indicates an expected call of GetLaunchesForDate.
func (mr *MockSpaceXServiceMockRecorder) GetLaunchesForDate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchesForDate", reflect.TypeOf((*MockSpaceXService)(nil).GetLaunchesForDate), arg0, arg1, arg2)
}
