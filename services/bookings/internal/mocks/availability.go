// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zsoltggs/tabeo-interview/services/bookings/internal/service/availability (interfaces: Availability)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/availability.go github.com/zsoltggs/tabeo-interview/services/bookings/internal/service/availability Availability
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAvailability is a mock of Availability interface.
type MockAvailability struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityMockRecorder
}

// MockAvailabilityMockRecorder is the mock recorder for MockAvailability.
type MockAvailabilityMockRecorder struct {
	mock *MockAvailability
}

// NewMockAvailability creates a new mock instance.
func NewMockAvailability(ctrl *gomock.Controller) *MockAvailability {
	mock := &MockAvailability{ctrl: ctrl}
	mock.recorder = &MockAvailabilityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailability) EXPECT() *MockAvailabilityMockRecorder {
	return m.recorder
}

// IsDateAvailable mocks base method.
func (m *MockAvailability) IsDateAvailable(arg0 context.Context, arg1 string, arg2 time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDateAvailable", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDateAvailable indicates an expected call of IsDateAvailable.
func (mr *MockAvailabilityMockRecorder) IsDateAvailable(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDateAvailable", reflect.TypeOf((*MockAvailability)(nil).IsDateAvailable), arg0, arg1, arg2)
}
