// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :exec
INSERT INTO bookings (id, first_name, last_name, gender, birthday, launch_pad_id, destination_id, launch_date,
                      created_at, updated_at)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10)
`

type CreateBookingParams struct {
	ID            uuid.UUID
	FirstName     string
	LastName      string
	Gender        string
	Birthday      pgtype.Timestamptz
	LaunchPadID   string
	DestinationID string
	LaunchDate    pgtype.Timestamptz
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) error {
	_, err := q.db.Exec(ctx, createBooking,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.Birthday,
		arg.LaunchPadID,
		arg.DestinationID,
		arg.LaunchDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteBooking = `-- name: DeleteBooking :one
DELETE
FROM bookings
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteBooking(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteBooking, id)
	err := row.Scan(&id)
	return id, err
}

const getBookingByID = `-- name: GetBookingByID :one
SELECT id,
       first_name,
       last_name,
       gender,
       birthday,
       launch_pad_id,
       destination_id,
       launch_date,
       created_at,
       updated_at
FROM bookings
WHERE id = $1
`

func (q *Queries) GetBookingByID(ctx context.Context, id uuid.UUID) (Booking, error) {
	row := q.db.QueryRow(ctx, getBookingByID, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Birthday,
		&i.LaunchPadID,
		&i.DestinationID,
		&i.LaunchDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBookings = `-- name: ListBookings :many
SELECT id,
       first_name,
       last_name,
       gender,
       birthday,
       launch_pad_id,
       destination_id,
       launch_date,
       created_at,
       updated_at
FROM bookings
WHERE launch_date = coalesce($1, launch_date)
  AND launch_pad_id = coalesce($2, launch_pad_id)
  AND destination_id = coalesce($3, destination_id)
ORDER BY created_at DESC LIMIT $5
OFFSET $4
`

type ListBookingsParams struct {
	LaunchDate    pgtype.Timestamptz
	LaunchPadID   pgtype.Text
	DestinationID pgtype.Text
	Offset        int32
	Limit         int32
}

func (q *Queries) ListBookings(ctx context.Context, arg ListBookingsParams) ([]Booking, error) {
	rows, err := q.db.Query(ctx, listBookings,
		arg.LaunchDate,
		arg.LaunchPadID,
		arg.DestinationID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Gender,
			&i.Birthday,
			&i.LaunchPadID,
			&i.DestinationID,
			&i.LaunchDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
